@page "/"
@page "/blog/{blogId?}"

@inject HttpClient httpClient
@inject test _test

<MudGrid Spacing="2">
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <h3>TITLE @_test.counter</h3>
        </MudPaper>
    </MudItem>
    <MudItem xs="9">
        <MudPaper>
            <MudContainer Class="ma-1">
                @blogFragment
            </MudContainer>
        </MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper>
            <MudList Clickable=true Dense=true>
                <MudListSubheader><MudText Typo="Typo.h6">a list!</MudText></MudListSubheader>
                <MudLink Href="/blog/TestBlog"><MudListItem>test blog</MudListItem></MudLink>
                <MudListItem>item 2</MudListItem>
                <MudListItem>item 3</MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>
</MudGrid>

@code
{
    [Parameter]
    public string? blogId { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public bool? debug { get; set; }

    private RenderFragment? blogFragment;

    protected override async Task OnInitializedAsync()
    {
        _test.counter++;

        await Task.Delay(100);

        if (blogId == null)
            return;

        BlogLexer lexer = new BlogLexer(File.ReadAllText($"{blogId}.txt"));
        blogFragment = new RenderFragment
            (builder =>
            {
                int sequence = 0;
                foreach (var output in lexer.Lex(debug == true))
                {
                    sequence = output.Output(sequence, builder);
                }
            });
    }
}
